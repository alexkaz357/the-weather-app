{"version":3,"sources":["assets/img/loader.gif","services/weatherService.js","store/actions/weatherActions.js","cmps/Mode.jsx","cmps/NavBar.jsx","cmps/Loader.jsx","cmps/FavoritesPreview.jsx","cmps/FavoritesList.jsx","pages/Favorites.jsx","cmps/Search.jsx","cmps/WeatherPreview.jsx","cmps/WatherList.jsx","cmps/WeatherDetails.jsx","pages/WeatherApp.jsx","App.jsx","store/reducers/weatherReducer.js","store/reducers/index.js","store/store.js","reportWebVitals.js","index.js"],"names":["API_KEY","resolveData","res","data","weatherService","loadWeather","getWeather","getCurrentWeather","getAutoCompleteSearch","loadFavoriteCities","favoriteCities","_loadFromStorage","addOrRemoveFavoriteCity","city","some","favoriteCity","cityName","cityIdxToUnFavorite","findIndex","cityInFavorites","splice","_saveToStorage","push","sorted","sortBy","sort","a","b","_sort","loadTemeratureUnits","prefferedUnits","isC","changeTemperatureUnits","newPrefferedUnits","loadDefaultLocation","id","_makeId","addIdToSelectedCity","getCurrentWeaterForFavoriteCities","loadModePrefs","prefferedMode","changeMode","newPrefferedMode","console","log","getCityKey","cityKey","axios","get","Key","then","query","Promise","all","map","currentWeather","favoriteCitiesWithCurrentWeather","length","txt","possible","i","charAt","Math","floor","random","key","val","localStorage","setItem","JSON","stringify","getItem","parse","setCity","dispatch","type","cityWithId","Mode","isDarkMode","useSelector","state","weatherReducer","useDispatch","theme","createMuiTheme","overrides","MuiSwitch","track","opacity","backgroundColor","className","ThemeProvider","Switch","checked","onChange","mode","color","name","NavBar","useState","isMenu","setIsMenu","toggleMenu","document","body","classList","toggle","onClick","to","Loader","src","require","default","alt","FavoritesPreview","isShowingCelcius","temperatureUnits","history","useHistory","goToMainAndDisplaySelectedFavoriteCityWeather","WeatherText","Temperature","Metric","Value","Imperial","Unit","FavoritesList","Favorites","useEffect","favoritesWithCurrentWeather","Search","search","setSearch","isInputEmpty","setIsInputEmpty","searchVals","ref","useRef","timeoutId","setTimeout","clearTimeout","addEventListener","handleClickOutsideSerchResults","removeEventListener","resetInput","e","current","contains","target","value","placeholder","autoComplete","searchVal","selectedCity","LocalizedName","Country","WeatherPreview","forecast","Date","getHours","currentHour","setCurrentHour","interval","setInterval","clearInterval","timeDiff","iconNum","Icon","getIconUrl","moment","format","IconPhrase","toFixed","WeatherList","forecasts","DailyForecasts","idx","WeatherDetails","favorites","Headline","Text","units","changeUnits","WeatherApp","weather","App","path","component","exact","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c0561fed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loader.5e01ee79.gif\";","import axios from 'axios'\r\n\r\nconst API_KEY = 'FlOJUbbCEJZEONxsV2wo2Qp0dUoV1Uy6'\r\n\r\nconst resolveData = res => res.data\r\n\r\nexport const weatherService = {\r\n  loadWeather,\r\n  getWeather,\r\n  getCurrentWeather,\r\n  getAutoCompleteSearch,\r\n  loadFavoriteCities,\r\n  addOrRemoveFavoriteCity,\r\n  loadTemeratureUnits,\r\n  changeTemperatureUnits,\r\n  loadDefaultLocation,\r\n  addIdToSelectedCity,\r\n  getCurrentWeaterForFavoriteCities,\r\n  loadModePrefs,\r\n  changeMode\r\n}\r\n\r\nasync function loadWeather(city) {\r\n  try {\r\n    return await getWeather(city)\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nasync function getWeather(city) {\r\n  try {\r\n    const cityKey = await getCityKey(city)\r\n    return axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey[0].Key}?apikey=${API_KEY}&metric=true`)\r\n      .then(resolveData)\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nasync function getCurrentWeather(city) {\r\n  try {\r\n    const cityKey = await getCityKey(city)\r\n    return axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${cityKey[0].Key}?apikey=${API_KEY}`)\r\n      .then(resolveData)\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nasync function getCityKey(city) {\r\n  try {\r\n    return await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/search?apikey=${API_KEY}&q=${city}`)\r\n      .then(resolveData)\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nasync function getAutoCompleteSearch(query) {\r\n  try {\r\n    return await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${query}`)\r\n      .then(resolveData)\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nfunction loadDefaultLocation() {\r\n  return {\r\n    id: _makeId(),\r\n    cityName: 'Tel Aviv'\r\n  }\r\n}\r\n\r\nfunction addIdToSelectedCity(city) {\r\n  const cityWithId = {\r\n    id: _makeId(),\r\n    cityName: city\r\n  }\r\n  return cityWithId\r\n}\r\n\r\nfunction loadFavoriteCities() {\r\n  let favoriteCities = _loadFromStorage('favorite-cities')\r\n  if (!favoriteCities) favoriteCities = []\r\n  return favoriteCities;\r\n}\r\n\r\nfunction addOrRemoveFavoriteCity(city) {\r\n  let favoriteCities = _loadFromStorage('favorite-cities')\r\n  if (favoriteCities && favoriteCities.some(\r\n      (favoriteCity) => favoriteCity.cityName === city.cityName\r\n    )) {\r\n    const cityIdxToUnFavorite = favoriteCities.findIndex(cityInFavorites => cityInFavorites.cityName === city.cityName)\r\n    favoriteCities.splice(cityIdxToUnFavorite, 1)\r\n    _saveToStorage('favorite-cities', favoriteCities)\r\n    return favoriteCities\r\n  }\r\n  if (!favoriteCities) favoriteCities = []\r\n  favoriteCities.push(city)\r\n  const sorted = _sort(favoriteCities)\r\n  _saveToStorage('favorite-cities', sorted)\r\n  return sorted\r\n}\r\n\r\nasync function getCurrentWeaterForFavoriteCities() {\r\n  try {\r\n    const favoriteCities = _loadFromStorage('favorite-cities')\r\n    if (!favoriteCities) return []\r\n    const favoriteCitiesWithCurrentWeather = await Promise.all(favoriteCities.map(async favoriteCity => ({\r\n      ...favoriteCity,\r\n      currentWeather: (await getCurrentWeather(favoriteCity.cityName))[0]\r\n    })))\r\n    return favoriteCitiesWithCurrentWeather\r\n  } catch (error) {\r\n    console.log('Something Went Wrong With The Folowing ', error);\r\n  }\r\n}\r\n\r\nfunction loadTemeratureUnits() {\r\n  let prefferedUnits = _loadFromStorage('units')\r\n  if (!prefferedUnits) prefferedUnits = {\r\n    isC: true\r\n  }\r\n  return prefferedUnits\r\n}\r\n\r\nfunction changeTemperatureUnits() {\r\n  let prefferedUnits = _loadFromStorage('units')\r\n  if (!prefferedUnits) prefferedUnits = {\r\n    isC: true\r\n  }\r\n  let newPrefferedUnits = {\r\n    isC: !prefferedUnits.isC\r\n  }\r\n  _saveToStorage('units', newPrefferedUnits)\r\n  return newPrefferedUnits\r\n}\r\n\r\nfunction loadModePrefs() {\r\n  let prefferedMode = _loadFromStorage('isDarkMode')\r\n  if (!prefferedMode) prefferedMode = false\r\n  return prefferedMode\r\n}\r\n\r\nfunction changeMode() {\r\n  let prefferedMode = _loadFromStorage('isDarkMode')\r\n  if (!prefferedMode) prefferedMode = false\r\n  let newPrefferedMode = !prefferedMode\r\n  _saveToStorage('isDarkMode', newPrefferedMode)\r\n  return newPrefferedMode\r\n}\r\n\r\nfunction _sort(favoriteCities, sortBy = 'cityName') {\r\n  return favoriteCities.sort((a, b) => {\r\n    return a[sortBy] < b[sortBy] ? -1 : a[sortBy] < b[sortBy] ? 1 : 0;\r\n  })\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n  var txt = '';\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  for (var i = 0; i < length; i++) {\r\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return txt;\r\n}\r\n\r\nfunction _saveToStorage(key, val) {\r\n  localStorage.setItem(key, JSON.stringify(val));\r\n}\r\n\r\nfunction _loadFromStorage(key) {\r\n  var val = localStorage.getItem(key);\r\n  return JSON.parse(val);\r\n}","import {\r\n  weatherService\r\n} from '../../services/weatherService'\r\n\r\nexport function loadWeather(city) {\r\n  return async dispatch => {\r\n    const weather = await weatherService.loadWeather(city)\r\n    dispatch({\r\n      type: 'SET_WEATHER',\r\n      weather\r\n    })\r\n  }\r\n}\r\n\r\nexport function loadAutoCompleteSearch(query) {\r\n  return async dispatch => {\r\n    const search = await weatherService.getAutoCompleteSearch(query)\r\n    dispatch({\r\n      type: 'SET_SEARCH',\r\n      search\r\n    })\r\n  }\r\n}\r\n\r\nexport function setCity(city) {\r\n  return dispatch => {\r\n    let cityWithId\r\n    if (!city.id) cityWithId = weatherService.addIdToSelectedCity(city)\r\n    else cityWithId = city\r\n    dispatch({\r\n      type: 'SELECT_CITY',\r\n      cityWithId\r\n    })\r\n  }\r\n}\r\n\r\nexport function addOrRemoveFavoriteCity(selectedCity) {\r\n  return dispatch => {\r\n    const favorites = weatherService.addOrRemoveFavoriteCity(selectedCity)\r\n    dispatch({\r\n      type: 'ADD_OR_REMOVE_FAVORITE_CITY',\r\n      favorites\r\n    })\r\n  }\r\n}\r\n\r\nexport function getCurrentWeaterForFavoriteCities() {\r\n  return async dispatch => {\r\n    const favoritesWithCurrentWeather = await weatherService.getCurrentWeaterForFavoriteCities()\r\n    dispatch({\r\n      type: 'GET_CURRENT_WEATHER_FOR_FAVORITE_CITIES',\r\n      favoritesWithCurrentWeather\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeUnits() {\r\n  const units = weatherService.changeTemperatureUnits()\r\n  return dispatch => {\r\n    dispatch({\r\n      type: 'CHANGE_TEMPERATURE_UNITS',\r\n      units\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeMode() {\r\n  const mode = weatherService.changeMode()\r\n  return dispatch => {\r\n    dispatch({\r\n      type: 'CHANGE_MODE',\r\n      mode\r\n    })\r\n  }\r\n}","import React from \"react\";\r\nimport { createMuiTheme, Switch, ThemeProvider } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeMode } from \"../store/actions/weatherActions\";\r\n\r\nexport default function Mode() {\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleModeChange = () => {\r\n    dispatch(changeMode());\r\n  };\r\n\r\n  const theme = createMuiTheme({\r\n    overrides: {\r\n      MuiSwitch: {\r\n        track: {\r\n          opacity: 0.5,\r\n          backgroundColor: \"#000\",\r\n          \"$checked$checked + &\": {\r\n            opacity: 0.5,\r\n            backgroundColor: \"#fff\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"mode\">\r\n        <div className=\"mode-switch\">\r\n          <p className={`mode-icon ${isDarkMode ? \"\" : \"color\"}`}>\r\n            <i className=\"fas fa-sun\"></i>\r\n          </p>\r\n          <ThemeProvider theme={theme}>\r\n            <Switch\r\n              checked={isDarkMode}\r\n              onChange={handleModeChange}\r\n              color=\"default\"\r\n              name=\"isDarkMode\"\r\n            />\r\n          </ThemeProvider>\r\n          <p className={`mode-icon ${isDarkMode ? \"color\" : \"\"}`}>\r\n            <i className=\"fas fa-moon\"></i>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Mode from \"../cmps/Mode\";\r\n\r\nexport function NavBar() {\r\n  const [isMenu, setIsMenu] = useState(false);\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  function toggleMenu() {\r\n    document.body.classList.toggle(\"menu-open\");\r\n    setIsMenu(!isMenu);\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className={`nav-bar flex space-between container ${\r\n        isDarkMode ? \"dark-mode\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"screen\" onClick={toggleMenu}></div>\r\n\r\n      <NavLink to=\"/\">\r\n        <h1 className=\"logo\">TheWeatherApp</h1>\r\n      </NavLink>\r\n\r\n      <Mode />\r\n\r\n      <div className={`links flex align-center ${isMenu ? \"\" : \"closed\"}`}>\r\n        <p\r\n          className={`close-btn ${isDarkMode ? \"dark-mode\" : \"\"}`}\r\n          onClick={toggleMenu}\r\n        >\r\n          <i className=\"fas fa-times\"></i>\r\n        </p>\r\n        <NavLink to=\"/\" onClick={toggleMenu}>\r\n          <p className=\"weather-link\">WEATHER</p>\r\n        </NavLink>\r\n        <NavLink to=\"/favorites\" onClick={toggleMenu}>\r\n          <p className=\"favorites-link\">FAVORITES</p>\r\n        </NavLink>\r\n      </div>\r\n\r\n      <p className=\"menu-btn\" onClick={toggleMenu}>\r\n        <i\r\n          className={`fas fa-bars menu-btn-icon ${\r\n            isDarkMode ? \"dark-mode\" : \"\"\r\n          }`}\r\n        ></i>\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <section className=\"loader\">\r\n      <img src={require(\"../../src/assets/img/loader.gif\").default} alt=\"\" />\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setCity } from \"../store/actions/weatherActions\";\r\nimport Loader from \"./Loader\";\r\n\r\nexport default function FavoritesPreview({ favoriteCity }) {\r\n  const isShowingCelcius = useSelector(\r\n    (state) => state.weatherReducer.temperatureUnits.isC\r\n  );\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const goToMainAndDisplaySelectedFavoriteCityWeather = (favoriteCity) => {\r\n    dispatch(setCity(favoriteCity));\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <section\r\n      className={`favorites-preview ${isDarkMode ? \"dark-mode\" : \"\"}`}\r\n      onClick={() =>\r\n        goToMainAndDisplaySelectedFavoriteCityWeather(favoriteCity.cityName)\r\n      }\r\n    >\r\n      {favoriteCity.currentWeather ? (\r\n        <div className=\"content flex column space-between\">\r\n          <h3 className=\"favorite-city-name\">{favoriteCity.cityName}</h3>\r\n          <p className=\"favorite-city-description\">\r\n            {favoriteCity.currentWeather.WeatherText}\r\n          </p>\r\n          <p className=\"favorite-city-temperature\">\r\n            {isShowingCelcius\r\n              ? favoriteCity.currentWeather.Temperature.Metric.Value\r\n              : favoriteCity.currentWeather.Temperature.Imperial.Value}\r\n            &deg;\r\n            {isShowingCelcius\r\n              ? favoriteCity.currentWeather.Temperature.Metric.Unit\r\n              : favoriteCity.currentWeather.Temperature.Imperial.Unit}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport FavoritesPreview from \"./FavoritesPreview\";\r\n\r\nexport default function FavoritesList({ favoriteCities }) {\r\n  return (\r\n    <section className=\"favorites-list flex container\">\r\n      {favoriteCities.map((favoriteCity) => (\r\n        <FavoritesPreview key={favoriteCity.id} favoriteCity={favoriteCity} />\r\n      ))}\r\n    </section>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport FavoritesList from \"../cmps/FavoritesList\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCurrentWeaterForFavoriteCities } from \"../store/actions/weatherActions\";\r\n\r\nexport default function Favorites() {\r\n  const favoriteCities = useSelector(\r\n    (state) => state.weatherReducer.favoriteCities\r\n  );\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getCurrentWeaterForFavoriteCities());\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"favorites\">\r\n      {isDarkMode ? (\r\n        <div className=\"stars-container\">\r\n          <div className=\"stars\"></div>\r\n          <div className=\"twinkling\"></div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"clouds-container\">\r\n          <div className=\"clouds\"></div>\r\n        </div>\r\n      )}\r\n\r\n      {favoriteCities.length ? (\r\n        <FavoritesList favoriteCities={favoriteCities} />\r\n      ) : (\r\n        <div className=\"no-favs\">\r\n          <h2>There are no favorites</h2>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  loadAutoCompleteSearch,\r\n  setCity,\r\n} from \"../store/actions/weatherActions\";\r\n\r\nexport default function Search() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [isInputEmpty, setIsInputEmpty] = useState(true);\r\n\r\n  const searchVals = useSelector((state) => state.weatherReducer.search);\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const ref = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let timeoutId = setTimeout(() => {\r\n      dispatch(loadAutoCompleteSearch(search));\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClickOutsideSerchResults, false);\r\n    return () => {\r\n      document.removeEventListener(\r\n        \"click\",\r\n        handleClickOutsideSerchResults,\r\n        false\r\n      );\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  function handleChange({ target }) {\r\n    const value = target.value;\r\n    if (value !== \"\") {\r\n      setSearch(value);\r\n      setIsInputEmpty(false);\r\n    } else if (value === \"\") resetInput();\r\n  }\r\n\r\n  const selectCity = (selectedCity) => {\r\n    dispatch(setCity(selectedCity));\r\n    resetInput();\r\n  };\r\n\r\n  const resetInput = () => {\r\n    setIsInputEmpty(true);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  const handleClickOutsideSerchResults = (e) => {\r\n    if (ref.current && !ref.current.contains(e.target)) {\r\n      resetInput();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className={`search ${isDarkMode ? \"dark-mode\" : \"\"} `}>\r\n      <input\r\n        className={`${isDarkMode ? \"dark-mode\" : \"\"} `}\r\n        type=\"text\"\r\n        name=\"search\"\r\n        value={search}\r\n        placeholder=\"Find city\"\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n      />\r\n      <i\r\n        className={`fas fa-search search-icon ${isDarkMode ? \"dark-mode\" : \"\"}`}\r\n      ></i>\r\n      {!isInputEmpty && searchVals && (\r\n        <div className=\"search-results\" ref={ref}>\r\n          {searchVals.map((searchVal) => (\r\n            <p\r\n              key={searchVal.Key}\r\n              onClick={() => selectCity(searchVal.LocalizedName)}\r\n            >\r\n              {searchVal.LocalizedName}, {searchVal.Country.LocalizedName}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function WeatherPreview({ forecast }) {\r\n  const [currentHour, setCurrentHour] = useState(new Date().getHours());\r\n\r\n  const isShowingCelcius = useSelector(\r\n    (state) => state.weatherReducer.temperatureUnits.isC\r\n  );\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const interval = useRef(null);\r\n\r\n  useEffect(() => {\r\n    interval.current = setInterval(() => {\r\n      setCurrentHour(new Date().getHours());\r\n    }, 1000 * 60);\r\n    return () => {\r\n      clearInterval(interval.current);\r\n    };\r\n  }, []);\r\n\r\n  const timeDiff = currentHour >= 18 || currentHour < 6;\r\n\r\n  function getIconUrl() {\r\n    let iconNum = forecast[`${timeDiff ? \"Night\" : \"Day\"}`].Icon;\r\n    if (iconNum < 10) iconNum = \"0\" + iconNum;\r\n    return `https://developer.accuweather.com/sites/default/files/${iconNum}-s.png`;\r\n  }\r\n\r\n  function showInF(val) {\r\n    return (val * 9) / 5 + 32;\r\n  }\r\n\r\n  return (\r\n    <section className={`weather-preview ${isDarkMode ? \"dark-mode\" : \"\"}`}>\r\n      <img src={getIconUrl()} alt=\"\" />\r\n      <h3>{moment(forecast.Date).format(\"ddd DD/MM/YY\")}</h3>\r\n      <p>{forecast[`${timeDiff ? \"Night\" : \"Day\"}`].IconPhrase}</p>\r\n      <p className=\"temperature\">\r\n        {isShowingCelcius\r\n          ? forecast.Temperature[`${timeDiff ? \"Minimum\" : \"Maximum\"}`].Value\r\n          : showInF(\r\n              forecast.Temperature[`${timeDiff ? \"Minimum\" : \"Maximum\"}`].Value\r\n            ).toFixed(1)}\r\n        &deg;{isShowingCelcius ? \"C\" : \"F\"}\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WeatherPreview from \"./WeatherPreview\";\r\n\r\nexport default function WeatherList({ forecasts }) {\r\n  return (\r\n    <section className=\"weather-list flex justify-center\">\r\n      {forecasts.DailyForecasts.map((forecast, idx) => (\r\n        <WeatherPreview key={idx} forecast={forecast} />\r\n      ))}\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport WeatherList from \"../cmps/WatherList\";\r\nimport {\r\n  addOrRemoveFavoriteCity,\r\n  changeUnits,\r\n} from \"../store/actions/weatherActions\";\r\n\r\nexport default function WeatherDetails({ forecasts }) {\r\n  const selectedCity = useSelector(\r\n    (state) => state.weatherReducer.selectedCity\r\n  );\r\n\r\n  const favoriteCities = useSelector(\r\n    (state) => state.weatherReducer.favoriteCities\r\n  );\r\n\r\n  const isShowingCelcius = useSelector(\r\n    (state) => state.weatherReducer.temperatureUnits.isC\r\n  );\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeTemperatureUnits = () => {\r\n    dispatch(changeUnits());\r\n  };\r\n\r\n  const toggleFavorites = () => {\r\n    dispatch(addOrRemoveFavoriteCity(selectedCity));\r\n  };\r\n\r\n  return (\r\n    <section className=\"weather-details\">\r\n      <p className={`title-city ${isDarkMode ? \"dark-mode\" : \"\"}`}>\r\n        {selectedCity.cityName}\r\n      </p>\r\n\r\n      <i\r\n        className={`fas fa-heart heart ${\r\n          favoriteCities.some(\r\n            (favoriteCity) => favoriteCity.cityName === selectedCity.cityName\r\n          )\r\n            ? \"favorite\"\r\n            : \"\"\r\n        }`}\r\n      ></i>\r\n\r\n      <button\r\n        className={`fav-btn ${isDarkMode ? \"dark-mode\" : \"\"}`}\r\n        onClick={toggleFavorites}\r\n      >\r\n        {`${\r\n          favoriteCities.some(\r\n            (favoriteCity) => favoriteCity.cityName === selectedCity.cityName\r\n          )\r\n            ? \"remove from favorites\"\r\n            : \"add to favorites\"\r\n        }`}\r\n      </button>\r\n\r\n      <WeatherList forecasts={forecasts} />\r\n\r\n      <div\r\n        className={`message-show flex space-between ${\r\n          isDarkMode ? \"dark-mode\" : \"\"\r\n        }`}\r\n      >\r\n        <p className=\"message\">{forecasts.Headline.Text}</p>\r\n        <p className=\"show\" onClick={changeTemperatureUnits}>\r\n          SHOW IN &deg;{isShowingCelcius ? \"F\" : \"C\"}\r\n        </p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../cmps/Loader\";\r\nimport Search from \"../cmps/Search\";\r\nimport WeatherDetails from \"../cmps/WeatherDetails\";\r\nimport { loadWeather } from \"../store/actions/weatherActions\";\r\n\r\nexport default function WeatherApp() {\r\n  const dispatch = useDispatch();\r\n\r\n  const isDarkMode = useSelector((state) => state.weatherReducer.isDarkMode);\r\n\r\n  const selectedCity = useSelector(\r\n    (state) => state.weatherReducer.selectedCity\r\n  );\r\n\r\n  const forecasts = useSelector((state) => state.weatherReducer.forecasts);\r\n\r\n  useEffect(() => {\r\n    dispatch(loadWeather(selectedCity.cityName));\r\n    // eslint-disable-next-line\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <section className=\"weather-app\">\r\n      {isDarkMode ? (\r\n        <div className=\"stars-container\">\r\n          <div className=\"stars\"></div>\r\n          <div className=\"twinkling\"></div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"clouds-container\">\r\n          <div className=\"clouds\"></div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"container\">\r\n        <Search />\r\n        {forecasts ? <WeatherDetails forecasts={forecasts} /> : <Loader />}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { NavBar } from \"./cmps/NavBar\";\r\nimport Favorites from \"./pages/Favorites\";\r\nimport WeatherApp from \"./pages/WeatherApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Switch>\r\n        <Router>\r\n          <Route path=\"/favorites\" component={Favorites} />\r\n          <Route path=\"/\" component={WeatherApp} exact />\r\n        </Router>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  weatherService\r\n} from \"../../services/weatherService\"\r\n\r\nconst initialState = {\r\n  forecasts: null,\r\n  search: null,\r\n  selectedCity: weatherService.loadDefaultLocation(),\r\n  favoriteCities: weatherService.loadFavoriteCities(),\r\n  temperatureUnits: weatherService.loadTemeratureUnits(),\r\n  isDarkMode: weatherService.loadModePrefs()\r\n}\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case 'SET_WEATHER':\r\n      return {\r\n        ...state,\r\n        forecasts: action.weather\r\n      }\r\n\r\n      case 'SET_SEARCH':\r\n        return {\r\n          ...state,\r\n          search: action.search\r\n        }\r\n\r\n        case 'SELECT_CITY':\r\n          return {\r\n            ...state, selectedCity: action.cityWithId\r\n          }\r\n\r\n          case 'ADD_OR_REMOVE_FAVORITE_CITY':\r\n            return {\r\n              ...state, favoriteCities: action.favorites\r\n            }\r\n\r\n            case 'GET_CURRENT_WEATHER_FOR_FAVORITE_CITIES':\r\n              return {\r\n                ...state, favoriteCities: action.favoritesWithCurrentWeather\r\n              }\r\n\r\n              case 'CHANGE_TEMPERATURE_UNITS':\r\n                return {\r\n                  ...state, temperatureUnits: action.units\r\n                }\r\n\r\n                case 'CHANGE_MODE':\r\n                  return {\r\n                    ...state, isDarkMode: action.mode\r\n                  }\r\n\r\n                  default:\r\n                    return state\r\n  }\r\n}","import {\r\n  combineReducers\r\n} from 'redux';\r\nimport {\r\n  weatherReducer\r\n} from './weatherReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  weatherReducer\r\n})\r\n\r\nexport default rootReducer;","import {\r\n  createStore,\r\n  applyMiddleware,\r\n  compose\r\n} from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index.js';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport './assets/styles/global.scss'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}